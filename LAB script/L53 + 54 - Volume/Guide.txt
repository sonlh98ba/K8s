-- Set up alias
alias k=kubectl

***** CREATE WEB APP USING VOLUME
*************************************************** LAB 54
=== Use EmptyDir
-- Create Pod Volume
nano podvolume.yaml

----------------------
apiVersion: v1
kind: Pod
metadata:
  name: fortune
spec:
  containers:
    - name: html-generator
      image: luksa/fortune
      volumeMounts:
        - name: html
          mountPath: /var/htdocs
    - name: web-server
      image: nginx:alpine
      ports:
        - containerPort: 80
          protocol: TCP
      volumeMounts:
        - name: html
          mountPath: /usr/share/nginx/html
          readOnly: true
  volumes:
    - name: html
      emptyDir: {}
----------------------

-- Create pod and checking
k apply -f podvolume.yaml
k get pod -o wide

curl <port IP>

k logs fortune -c web-server
k describe pod fortune

-- Exec to container html-generator
k exec fortune -c html-generator -it /bin/sh

-- Check content that is shared with container web-server
ls /var/htdocs
touch /var/htdocs/text1.txt
exit

-- Exec to container web-server
k exec fortune -c web-server -it /bin/sh
df -h
ls /usr/share/nginx/html

=== Use Persistent Volume
--- Set up NFS Server in Ansible EC2
sudo apt update
sudo apt install nfs-kernel-server

-- Create folder and public it
sudo mkdir -p /data/mydata
sudo chown -R nobody:nogroup /data/mydata
sudo chmod -R 777 /data/mydata

-- Create file exports
sudo nano /etc/exports

-- Add line
/data/mydata *(rw,sync,no_subtree_check,insecure)

sudo exportfs -a

-- Restart nfs server
sudo systemctl restart nfs-kernel-server

--- Set up nfs client connect to nfs server
sudo apt install nfs-common

-- Create pv
nano pv-create-nfs.yaml

----------------------
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv1
spec:
  storageClassName: nfsstorageclass
  capacity:
    storage: 3Gi
  accessModes:
    - ReadWriteMany
  nfs:
    path: "/data/mydata/"
    server: "10.0.0.4"
----------------------

k apply -f pv-create-nfs.yaml
k get pv -o wide
k describe pv/pv1

-- Create pvc
nano pvc-nfs.yaml

----------------------
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc1
spec:
  storageClassName: nfsstorageclass
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 3Gi
----------------------

k apply -f pvc-nfs.yaml
k get pvc,pv -o wide

nano /data/mydata/index.html

-- Add content
<h1> Hello <h1>

nano apache-https.yaml

----------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: httpd
  labels:
    app: httpd
spec:
  replicas: 1
  selector:
    matchLabels:
      app: httpd
  template:
    metadata:
      labels:
        app: httpd
    spec:
      volumes:
        - name: htdocs
          persistentVolumeClaim:
            claimName: pvc1
      containers:
        - name: app
          image: httpd
          resources:
            limits:
              memory: "100M"
              cpu: "100m"
          ports:
            - containerPort: 80
          volumeMounts:
            - mountPath: /usr/local/apache2/htdocs/
              name: htdocs
----------------------

k apply -f apache-https.yaml
k get pod -o wide
curl <port IP>

*************************************************** LAB 53

-- Tag in worker node to create pod in worker node
k label nodes worker disktype=nfs
k describe node worker

nano nginxweb.yaml

----------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: webnginx
  labels:
    app: webnginx
spec:
  replicas: 2
  selector:
    matchLabels:
      app: webnginx
  template:
    metadata:
      labels:
        app: webnginx
    spec:
      volumes:
        - name: webnginxvolume
          persistentVolumeClaim:
            claimName: pvc1
      containers:
        - name: app
          image: nginx
          resources:
            limits:
              memory: "100M"
              cpu: "100m"
          ports:
            - containerPort: 80
          volumeMounts:
            - mountPath: /usr/share/nginx/html/
              name: webnginxvolume
      nodeSelector:
        disktype: nfs
----------------------

k apply -f nginxweb.yaml
k get pod -o wide
curl <port IP>

k get pv,pvc -o wide

-- Create a new pvc require 2GB
nano pvc2-nfs.yaml

----------------------
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc2
spec:
  storageClassName: nfsstorageclass
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 2Gi
----------------------

k apply -f pvc2-nfs.yaml
k get pv,pvc -o wide

== Delete PV connected to PVC 
-- Check info pv
k describe pv pv1

-- Delete all PVC use PV before delete PV
-- Delete all deployment use PVC before delete PVC

k describe deployment webnginx

k delete -f pvc-nfs.yaml
k get pv,pvc -o wide

k delete -f nginxweb.yaml
k delete -f apache-https.yaml
k get pod
k get pv,pvc -o wide

k delete -f pv-create-nfs.yaml
k apply -f pv-create-nfs.yaml
k get pv,pvc -o wide
